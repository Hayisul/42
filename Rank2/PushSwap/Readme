# 🔄 Push_swap

> Stack Sorting with Limited Operations

**Push_swap** is a 42 algorithmic project written in C.
The goal is to sort a stack of integers using a limited set of operations with the fewest possible moves.

---

## 🎯 Objective

You're given two stacks (a and b) and must sort the data in stack a in ascending order using:

- A restricted set of stack operations
- The most efficient algorithm you can design
- No built-in sort functions or loops beyond what's permitted

---

## 📌 Features

- Validates input (no duplicates, only integers)
- Uses a linked list stack implementation
- Efficient handling for small and large data sets
- Custom error handling and memory management

---

## 📦 Requirements

- Sort 100 numbers in <700 operations
- Sort 500 numbers in <5500 operations
- No leaks, no crashes, no forbidden functions
- Fully compliant with 42 Norm

---

## 🛠️ Allowed Operations

| Instruction   | Description                                  |
| ------------- | -------------------------------------------- |
| `sa` / `sb`   | Swap the first two elements of stack a/b     |
| `ss`          | `sa` and `sb` at the same time               |
| `pa` / `pb`   | Push top element from one stack to the other |
| `ra` / `rb`   | Rotate stack a/b up                          |
| `rr`          | Rotate both stacks up                        |
| `rra` / `rrb` | Reverse rotate stack a/b down                |
| `rrr`         | Reverse rotate both stacks down              |

---

## 📁 Directory Structure

```text
push_swap/
├── Makefile                    # Contains build instructions for the project
├── README.md                   # Project overview and instructions
├── push_swap.c                 # Main entry point for the program
├── inc/
│   └── push_swap.h             # All prototypes and include files
│
├── src/
│   ├── build/
│   │   ├── stack_builder.c     # build_stack_a, parse_input, split_args, fill_stack, free_stack
│   │   └── stack_utils.c       # stack_len, stack_sorted, find_min, find_max, find_last
│   │
│   ├── analyze/
│   │   ├── node_analysis.c     # analyze_stack_a, assign_targets_a, etc.
│   │   ├── target_assignment.c # assign_targets_b, etc.
│   │   ├── cost_analysis.c     # calculate_push_cost, mark_cheapest, etc.
│   │   └── node_utils.c        # find_cheapest_node, cost helpers
│   │
│   ├── sort/
│   │   ├── sort.c              # sort_stacks, sort_three, rotate_to_min
│   │   └── push_prep.c         # prep_a, prep_b, push_to_stack, etc.
│   │
│   ├── operations/
│   │   ├── swap_ops.c          # sa, sb, ss
│   │   ├── push_ops.c          # pa, pb
│   │   ├── rotate_ops.c        # ra, rb, rr
│   │   └── reverse_ops.c       # rra, rrb, rrr
│   │
│   ├── utils/
│   │   ├── cleanup.c           # Functions related to memory management
│   │   └── stack_utils.c       # Functions related to stack utilities
│
├── libft/                      # Copied libft sources
│   └── ...
```

---

## 🧑‍💻 Usage

### 1. Clone the repository

```sh
git clone git@github.com:yourusername/push_swap.git
cd push_swap
```

### 2. Compile the program

```sh
make
```

### 3. Run with arguments

You can run the program with a list of integers as arguments. For example:

```sh
./push_swap 4 2 3 1
```

### 🧪 Example Usage

You can also use the provided `checker_linux` program to validate your sorting:

```sh
ARG="2 1 3"; ./push_swap $ARG | ./resources/checker_linux $ARG
```

---

## 📝 License

This project is part of the 42 School curriculum and is for educational purposes only.
Do not use this as a submission if you're a 42 student.

---

## 🤝 Contributions

Contributions are welcome for testing or learning purposes.
Fork the repo and submit a pull request with improvements.
