# Variables
NAME = push_swap
# NAME variable: contains the name of the executable file that will be created
# when the Makefile is executed. In this case, the name is "push_swap".


SRCS = main.c input.c stack_ops.c sort.c utils.c
OBJS = $(SRCS:.c=.o)
# SRCS variable: contains the list of source files that will be compiled
# OBJS variable: contains the list of object files that will be created
# $(SRCS:.c=.o) syntax: is a shorthand for creating a list of object files
# from the list of source files.
# .c files: are the source files 
# .o files: are the object files generated by the compiler

# Compiler and flags
CC = cc
CFLAGS = -Wall -Wextra -Werror

# Target
# The target is the name of the executable file that will be created
# when the Makefile is executed. In this case, the target is "push_swap".
all: $(NAME)

# Rule for creating the target
$(NAME): $(OBJS)
	$(MAKE) -C libft
	$(CC) $(CFLAGS) $(OBJS) -Llibft -lft -o $(NAME)
# $(NAME) target: depends on the object files $(OBJS).
# When the target: is built, the object files are linked together
# to create the final executable file.
# $(MAKE) command: is used to call the make command in the libft directory
# to build the libft library, which is linked with the object files.
# $(CC) command: is used to compile the object files and create the executable.
# $(CFLAGS) variable: contains the compiler flags that are passed to the compiler.
# $(OBJS) variable: contains the list of object files that are passed to the linker.
# -Llibft flag: tells the linker to look for libraries in the libft directory.
# -lft flag: tells the linker to link with the libft library.
# -o $(NAME) flag: tells the linker to create an executable file with the name specified in the $(NAME) variable.

clean:
	$(MAKE) clean -C libft
	rm -f $(OBJS)
# clean target: removes the object files created during the compilation process

fclean: clean
	$(MAKE) fclean -C libft
	rm -f $(NAME)
# fclean target: removes the executable file created during the compilation process
# fclean target: depends on the clean target, so it first removes the object files
# and then removes the executable file.

re: fclean all
# re target: is a combination of the fclean and all targets.
# It first removes the executable file and object files, and then rebuilds the project.
# This is useful when you want to start from scratch and rebuild everything.
# The re target is a common convention in Makefiles to allow for a clean rebuild of the project.

.PHONY: all clean fclean re
# .PHONY target: is used to declare that the targets all, clean, fclean, and re